import sys,re,bisect
def fall(bricks):
 stack, fell = [], 0
 for x1, y1, z1, x2, y2, z2 in bricks:
  h=z2-z1;t1=1
  for r1, s1, t1, r2, s2, t2 in reversed(stack):
   if not (x2 < r1 or r2 < x1) and not (s2 < y1 or y2 < s1):fell += z1 != t2 + 1;z1 = t2 + 1;break
  else:fell += z1 != t1;z1 = t1
  bisect.insort(stack, [x1, y1, z1, x2, y2, z1 + h], key=lambda x:x[5])
 return stack,fell
s,_=fall(b:=sorted([[*map(int,re.findall('\d+',l))]for l in open(0)],key=lambda x:x[5]))
print(sum(fall(s[:i]+s[i+1:])[1]==0 for i in range(len(s))),sum(fall(s[:i]+s[i+1:])[1]for i in range(len(s))))